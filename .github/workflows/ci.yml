name: Laravel Dockerized Pipeline with EC2 Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  laravel-docker-pipeline:

    runs-on: ubuntu-latest

    env: # Define global environment variables
      APP_ENV: ${{ secrets.APP_ENV }}
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      CONTAINER_DB_PORT: ${{ secrets.CONTAINER_DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      CONTAINER_REDIS_PORT: ${{ secrets.CONTAINER_REDIS_PORT }}


    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # Build the Docker Image
      - name: Build Docker Image
        # uid and user below is from the php service from the docker-compose.yml file change appropriately
        run: |
          docker build --build-arg uid=1000 --build-arg user=example_app_user -t olayemi/example-app:latest .
      # Push the Docker Image
      - name: Push Docker Image
        run: |
          docker push olayemi/example-app:latest

      # Start Containers Locally for Testing
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Start Docker Compose (Plugin)
        run: docker compose -f docker-compose.yml up -d


      # Mark /var/www as Safe Directory
      - name: Mark /var/www as Safe Directory
        run: |
          docker exec $(docker ps -qf "name=example_app") git config --global --add safe.directory /var/www

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if docker exec example_mysql_container mysqladmin ping -h "localhost" --silent; then
              echo "MySQL is ready!";
              break;
            fi
            echo "Waiting for MySQL to be ready...";
            sleep 2;
          done

        # Install Composer Dependencies
      - name: Install Composer Dependencies
        run: |
          docker exec --user 1001 $(docker ps -qf "name=example_app") composer install --no-dev --optimize-autoloader

      # Run Laravel Migrations
      - name: Run Laravel Migrations
        run: |
          docker exec --user 1001 $(docker ps -qf "name=example_app") php artisan migrate --force

      # Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/example-app:latest
            docker stop example-app || true
            docker rm example-app || true
            docker run -d --name example-app -p 80:9000 \
              --env DB_CONNECTION=mysql \
              --env DB_HOST=${{ secrets.DB_HOST }} \
              --env DB_PORT=3306 \
              --env DB_DATABASE=laravel \
              --env DB_USERNAME=${{ secrets.DB_USERNAME }} \
              --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ secrets.DOCKER_USERNAME }}/example-app:latest
